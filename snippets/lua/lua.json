{
    "for": {
        "prefix": "for",
        "body": ["for $1 do", "\t$0", "end"],
        "description": "for statement"
    },
    "for-ipairs": {
        "prefix": "fori",
        "body": ["for ${1:i}, ${2:x} in ipairs(${3:t}) do", "\t$0", "end"],
        "description": "for i, x in ipairs(t)"
    },
    "for-pairs": {
        "prefix": "forp",
        "body": ["for ${1:k}, ${2:v} in pairs(${3:t}) do", "\t$0", "end"],
        "description": "for k, v in pairs(t)"
    },
    "forline": {
        "prefix": "forline",
        "body": [
            "local f = io.open(${1:${2:filename}}, \"${3:r}\")\n",
            "while true do",
            "\tline = f:read()",
            "\tif line == nil then break end\n",
            "\t${0}",
            "end"
        ],
        "description": "Read file line by line"
    },
    "assign-function": {
        "prefix": "gfn=",
        "body": ["${1:name} = function($2)", "\t${0}", "end"],
        "description": "Assign a function to a variable"
    },
    "local-assign-function": {
        "prefix": "lfn=",
        "body": ["local ${1:name} = function($2)", "\t${0}", "end"],
        "description": "Assign a function to a local variable"
    },
    "anonymous-function": {
        "prefix": "afn",
        "body": ["function($1)", "\t${0}", "end"],
        "description": "Create an anonymous function"
    },
    "member-function": {
        "prefix": "f,",
        "body": ["${1:name} = function($2)", "\t${0}", "end,"],
        "description": "Assign a function to a table key"
    },
    "self": {
        "prefix": "self:",
        "body": ["function self:${1:methodName}($2)", "\t$0", "end"]
    },
    "while": {
        "prefix": "while",
        "body": ["while ${1:true} do", "\t$0", "end"]
    },
    "pcall": {
        "prefix": "pca",
        "body": ["pcall(${1:function}, ${2:args})"],
        "description": "Protect call a function"
    },
    "locpcall": {
        "prefix": "lpca",
        "body": ["local ${1:status}, ${2:err_or_value} = pcall(${3:function}, ${4:args})"],
        "description": "Protect call a function as a variable"
    }
}
